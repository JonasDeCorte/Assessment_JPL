// <auto-generated />
using System;
using ClubBrugge.Erp.Application;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClubBrugge.Erp.Application.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230429122340_MatchPlayerStats")]
    partial class MatchPlayerStats
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.AwayTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AwayTeamGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwayTeamGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<string>("AwayTeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AwayTeamYouth")
                        .HasColumnType("bit");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("AwayTeams");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.CompetitionStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompetitionStageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompetitionStages");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.HomeTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("HomeTeamGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeTeamGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<string>("HomeTeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HomeTeamYouth")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("HomeTeams");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("CountryId");

                    b.HasIndex("HomeTeamId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Attendance")
                        .HasColumnType("int");

                    b.Property<int>("AwayScore")
                        .HasColumnType("int");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<bool>("BehindClosedDoors")
                        .HasColumnType("bit");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<int>("CompetitionStageId")
                        .HasColumnType("int");

                    b.Property<int>("HomeScore")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<string>("KickOff")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdated360")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatchDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("MatchStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatchStatus360")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchWeek")
                        .HasColumnType("int");

                    b.Property<bool>("NeutralGround")
                        .HasColumnType("bit");

                    b.Property<string>("PlayStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RefereeId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("CompetitionStageId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("RefereeId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("StadiumId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.MatchPlayerStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<double>("PlayerMatch360Minutes")
                        .HasColumnType("float");

                    b.Property<double>("PlayerMatchAerialRatio")
                        .HasColumnType("float");

                    b.Property<int>("PlayerMatchAerials")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchAggressiveActions")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchAssists")
                        .HasColumnType("int");

                    b.Property<double?>("PlayerMatchAverageF3SpaceReceivedIn")
                        .HasColumnType("float");

                    b.Property<double?>("PlayerMatchAverageFhalfSpaceReceivedIn")
                        .HasColumnType("float");

                    b.Property<double?>("PlayerMatchAverageLbpToSpaceDistance")
                        .HasColumnType("float");

                    b.Property<double?>("PlayerMatchAverageLbpToSpaceReceivedDistance")
                        .HasColumnType("float");

                    b.Property<double?>("PlayerMatchAverageSpaceReceivedIn")
                        .HasColumnType("float");

                    b.Property<int>("PlayerMatchBackwardPasses")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchBallReceipts360")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchBallReceiptsInSpace10")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchBallReceiptsInSpace2")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchBallReceiptsInSpace5")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchBallRecoveries")
                        .HasColumnType("int");

                    b.Property<double>("PlayerMatchBoxCrossRatio")
                        .HasColumnType("float");

                    b.Property<double>("PlayerMatchChallengeRatio")
                        .HasColumnType("float");

                    b.Property<int>("PlayerMatchClearances")
                        .HasColumnType("int");

                    b.Property<double>("PlayerMatchCounterpressureDurationAvg")
                        .HasColumnType("float");

                    b.Property<double>("PlayerMatchCounterpressureDurationTotal")
                        .HasColumnType("float");

                    b.Property<int>("PlayerMatchCounterpressuredActionFails")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchCounterpressures")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchCrosses")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchCrossesIntoBox")
                        .HasColumnType("int");

                    b.Property<double?>("PlayerMatchCrossingRatio")
                        .HasColumnType("float");

                    b.Property<int>("PlayerMatchDeepCompletions")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchDeepProgressions")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchDispossessions")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchDribbledPast")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchDribbles")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchDribblesFaced")
                        .HasColumnType("int");

                    b.Property<double?>("PlayerMatchF3AverageLbpToSpaceDistance")
                        .HasColumnType("float");

                    b.Property<double?>("PlayerMatchF3AverageLbpToSpaceReceivedDistance")
                        .HasColumnType("float");

                    b.Property<int?>("PlayerMatchF3BallReceipts360")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchF3BallReceiptsInSpace10")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchF3BallReceiptsInSpace2")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchF3BallReceiptsInSpace5")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchF3Lbp")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchF3LbpCompleted")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchF3LbpReceived")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchF3LbpToSpace10")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchF3LbpToSpace10Received")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchF3LbpToSpace2")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchF3LbpToSpace2Received")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchF3LbpToSpace5")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchF3LbpToSpace5Received")
                        .HasColumnType("int");

                    b.Property<double?>("PlayerMatchF3ObvLbp")
                        .HasColumnType("float");

                    b.Property<double?>("PlayerMatchF3ObvPasses360")
                        .HasColumnType("float");

                    b.Property<int?>("PlayerMatchF3Passes360")
                        .HasColumnType("int");

                    b.Property<double?>("PlayerMatchFhalfAverageLbpToSpaceDistance")
                        .HasColumnType("float");

                    b.Property<double?>("PlayerMatchFhalfAverageLbpToSpaceReceivedDistance")
                        .HasColumnType("float");

                    b.Property<int?>("PlayerMatchFhalfBallReceipts360")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchFhalfBallReceiptsInSpace10")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchFhalfBallReceiptsInSpace2")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchFhalfBallReceiptsInSpace5")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchFhalfBallRecoveries")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchFhalfLbp")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchFhalfLbpCompleted")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchFhalfLbpReceived")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchFhalfLbpToSpace10")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchFhalfLbpToSpace10Received")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchFhalfLbpToSpace2")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchFhalfLbpToSpace2Received")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchFhalfLbpToSpace5")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchFhalfLbpToSpace5Received")
                        .HasColumnType("int");

                    b.Property<double?>("PlayerMatchFhalfObvLbp")
                        .HasColumnType("float");

                    b.Property<double?>("PlayerMatchFhalfObvPasses360")
                        .HasColumnType("float");

                    b.Property<int?>("PlayerMatchFhalfPasses360")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchForwardPasses")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchFouls")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchFoulsWon")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchGoals")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchInterceptions")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchKeyPasses")
                        .HasColumnType("int");

                    b.Property<double?>("PlayerMatchLbp")
                        .HasColumnType("float");

                    b.Property<int?>("PlayerMatchLbpCompleted")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchLbpReceived")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchLbpToSpace10")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchLbpToSpace10Received")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchLbpToSpace2")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchLbpToSpace2Received")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchLbpToSpace5")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchLbpToSpace5Received")
                        .HasColumnType("int");

                    b.Property<double>("PlayerMatchLongBallRatio")
                        .HasColumnType("float");

                    b.Property<int>("PlayerMatchLongBalls")
                        .HasColumnType("int");

                    b.Property<double>("PlayerMatchMinutes")
                        .HasColumnType("float");

                    b.Property<int>("PlayerMatchNpGoals")
                        .HasColumnType("int");

                    b.Property<double>("PlayerMatchNpPsxg")
                        .HasColumnType("float");

                    b.Property<int>("PlayerMatchNpShots")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchNpShotsOnTarget")
                        .HasColumnType("int");

                    b.Property<double>("PlayerMatchNpXg")
                        .HasColumnType("float");

                    b.Property<double>("PlayerMatchNpXgPerShot")
                        .HasColumnType("float");

                    b.Property<double>("PlayerMatchObv")
                        .HasColumnType("float");

                    b.Property<double>("PlayerMatchObvDefensiveAction")
                        .HasColumnType("float");

                    b.Property<double>("PlayerMatchObvDribbleCarry")
                        .HasColumnType("float");

                    b.Property<double?>("PlayerMatchObvGk")
                        .HasColumnType("float");

                    b.Property<double?>("PlayerMatchObvLbp")
                        .HasColumnType("float");

                    b.Property<double>("PlayerMatchObvPass")
                        .HasColumnType("float");

                    b.Property<double?>("PlayerMatchObvPasses360")
                        .HasColumnType("float");

                    b.Property<double>("PlayerMatchObvShot")
                        .HasColumnType("float");

                    b.Property<int>("PlayerMatchOpAssists")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchOpF3BackwardPasses")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchOpF3ForwardPasses")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchOpF3Passes")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchOpF3SidewaysPasses")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchOpKeyPasses")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchOpPasses")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchOpPassesIntoBox")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchOpShots")
                        .HasColumnType("int");

                    b.Property<double>("PlayerMatchOpXa")
                        .HasColumnType("float");

                    b.Property<double>("PlayerMatchOpXgbuildup")
                        .HasColumnType("float");

                    b.Property<double>("PlayerMatchOpXgbuildupPerPossession")
                        .HasColumnType("float");

                    b.Property<double>("PlayerMatchOpXgchain")
                        .HasColumnType("float");

                    b.Property<double>("PlayerMatchOpXgchainPerPossession")
                        .HasColumnType("float");

                    b.Property<int>("PlayerMatchPasses")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerMatchPasses360")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchPassesInsideBox")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchPassesIntoBox")
                        .HasColumnType("int");

                    b.Property<double>("PlayerMatchPassingRatio")
                        .HasColumnType("float");

                    b.Property<int>("PlayerMatchPenaltiesConceded")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchPenaltiesFaced")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchPenaltiesWon")
                        .HasColumnType("int");

                    b.Property<double>("PlayerMatchPossession")
                        .HasColumnType("float");

                    b.Property<double>("PlayerMatchPressureDurationAvg")
                        .HasColumnType("float");

                    b.Property<double>("PlayerMatchPressureDurationTotal")
                        .HasColumnType("float");

                    b.Property<int>("PlayerMatchPressureRegains")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchPressuredActionFails")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchPressuredLongBalls")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchPressures")
                        .HasColumnType("int");

                    b.Property<double>("PlayerMatchShotTouchRatio")
                        .HasColumnType("float");

                    b.Property<int>("PlayerMatchShotsBlocked")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchSidewaysPasses")
                        .HasColumnType("int");

                    b.Property<double>("PlayerMatchSpXa")
                        .HasColumnType("float");

                    b.Property<int>("PlayerMatchSuccessfulAerials")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchSuccessfulCrosses")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchSuccessfulLongBalls")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchSuccessfulPasses")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchTackles")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchThroughBalls")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchTouches")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchTouchesInsideBox")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchTurnovers")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMatchUnpressuredLongBalls")
                        .HasColumnType("int");

                    b.Property<double>("PlayerMatchXa")
                        .HasColumnType("float");

                    b.Property<double>("PlayerMatchXgbuildup")
                        .HasColumnType("float");

                    b.Property<double>("PlayerMatchXgbuildupPerPossession")
                        .HasColumnType("float");

                    b.Property<double>("PlayerMatchXgchain")
                        .HasColumnType("float");

                    b.Property<double>("PlayerMatchXgchainPerPossession")
                        .HasColumnType("float");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MatchPlayerStats");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.Referee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RefereeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Referees");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.Stadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Stadiums");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.AwayTeam", b =>
                {
                    b.HasOne("ClubBrugge.Erp.Domain.Entities.Country", "Country")
                        .WithMany("AwayTeams")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.Competition", b =>
                {
                    b.HasOne("ClubBrugge.Erp.Domain.Entities.Country", null)
                        .WithMany("Competitions")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.HomeTeam", b =>
                {
                    b.HasOne("ClubBrugge.Erp.Domain.Entities.Country", "Country")
                        .WithMany("HomeTeams")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.Manager", b =>
                {
                    b.HasOne("ClubBrugge.Erp.Domain.Entities.AwayTeam", null)
                        .WithMany("AwayTeamManagers")
                        .HasForeignKey("AwayTeamId");

                    b.HasOne("ClubBrugge.Erp.Domain.Entities.Country", "Country")
                        .WithMany("Managers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubBrugge.Erp.Domain.Entities.HomeTeam", null)
                        .WithMany("HomeTeamManagers")
                        .HasForeignKey("HomeTeamId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.Match", b =>
                {
                    b.HasOne("ClubBrugge.Erp.Domain.Entities.AwayTeam", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClubBrugge.Erp.Domain.Entities.Competition", "Competition")
                        .WithMany("Matches")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClubBrugge.Erp.Domain.Entities.CompetitionStage", "CompetitionStage")
                        .WithMany("Matches")
                        .HasForeignKey("CompetitionStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubBrugge.Erp.Domain.Entities.HomeTeam", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClubBrugge.Erp.Domain.Entities.Referee", "Referee")
                        .WithMany("Matches")
                        .HasForeignKey("RefereeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubBrugge.Erp.Domain.Entities.Season", "Season")
                        .WithMany("Matches")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubBrugge.Erp.Domain.Entities.Stadium", "Stadium")
                        .WithMany("Matches")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("Competition");

                    b.Navigation("CompetitionStage");

                    b.Navigation("HomeTeam");

                    b.Navigation("Referee");

                    b.Navigation("Season");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.Referee", b =>
                {
                    b.HasOne("ClubBrugge.Erp.Domain.Entities.Country", "Country")
                        .WithMany("Referees")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.Stadium", b =>
                {
                    b.HasOne("ClubBrugge.Erp.Domain.Entities.Country", "Country")
                        .WithMany("Stadiums")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.AwayTeam", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("AwayTeamManagers");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.Competition", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.CompetitionStage", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.Country", b =>
                {
                    b.Navigation("AwayTeams");

                    b.Navigation("Competitions");

                    b.Navigation("HomeTeams");

                    b.Navigation("Managers");

                    b.Navigation("Referees");

                    b.Navigation("Stadiums");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.HomeTeam", b =>
                {
                    b.Navigation("HomeMatches");

                    b.Navigation("HomeTeamManagers");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.Referee", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.Season", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("ClubBrugge.Erp.Domain.Entities.Stadium", b =>
                {
                    b.Navigation("Matches");
                });
#pragma warning restore 612, 618
        }
    }
}
